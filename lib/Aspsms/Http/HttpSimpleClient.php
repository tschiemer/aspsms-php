<?php

namespace Aspsms;

require_once dirname(__FILE__) . '/../AbstractSimpleClient.php';
require_once dirname(__FILE__) . '/HttpClient.php';

/**
 * Simple client interface for HTTP service only.
 * 
 * @version 1
 * @package aspsms
 * @license LGPL v3 http://www.gnu.org/licenses/lgpl-3.0.txt 
 * @copyright 2013 Philip Tschiemer, <tschiemer@filou.se>
 * @link https://github.com/tschiemer/aspsms-php
 */
class HttpSimpleClient extends AbstractSimpleClient
{
    /**
     * @var SoapClient
     */
    var $driver;
    
    /**
     * Constructor
     * 
     * Sets up simple client and client/driver, thus taking any parameters for these to
     * where any parameters for the driver must be fields of the base field 'httpclient'
     * eg
     * 
     *  new HttpSimpleClient(array(
     *      'userkey'       => 'k',
     *      'password'      => 'p',
     *      'originator'    => 'o',
     *      'httpclient'    => array('method'=>'POST', .. )
     *  ));
     * 
     * 
     * @param assoc $options
     * 
     * @see AbstractSimpleClient::__construct()
     * @see HttpClient::__construct()
     */
    public function __construct($options = array()) {
        parent::__construct($options);
        
        if ( ! isset($options['httpclient']) or ! is_array($options['httpclient']))
        {
            $options['httpclient'] = array();
        }
        
        $this->driver = new HttpClient($options['httpclient']);
    }
    
    /**
     * Get driver for simple client.
     * 
     * @param \Aspsms\Request $request
     * @return \Aspsms\AstractClient
     */
    public function driver(&$request) {
        return $this->driver;
    }
    
    
    /**
     * Request: Get Http Service version.
     * 
     * @return array Associative array with fields 'all','version','build' and corresponding meaning.
     */
    public function getVersion()
    {
        return $this->send(array(
            'RequestName' => 'getVersion'
        ));
    }
    
    
    /**
     * Request: Get description to given status code.
     * 
     * @param string|int $statusCode
     * @return string
     */
    public function getStatusDescription($statusCode)
    {   
        return $this->send(array(
            'RequestName' => 'getStatusCodeDescription',
            'StatusCode' => $statusCode
        ));
    }
    
    
    /**
     * Request: Send a token a predefined token to recipients.
     * 
     * Official doc:
     * 
     * If MessageData is set, the placeholder <VERIFICATIONCODE> will be
     * substituted with the verification code. If MessageData is not defined,
     * or if MessageData does not contain the placeholder <VERIFICATIONCODE>,
     * only the verification code is sent.
     * 
     * @param string $phoneNr           Recipient phone number
     * @param string $reference         Your reference number
     * @param string $verificationCode  Required verification code to send
     * @param string $message           Message to send code with.
     * @param int $minutes              Validity of token in minutes (default 5)
     * @param boolean $case_sensitive   Is given code case sensitive?
     * @return boolean                  Request success?
     */
    public function sendMyToken($phoneNr,$reference,$verificationCode,$message='',$minutes=5, $case_sensitive=0)
    {
        return $this->send(array(
            'RequestName'       => 'sendToken',
            'Recipients'        => $phoneNr,
            'TokenReference'    => $reference,
            'VerificationCode'  => $verificationCode,
            'MessageData'       => $message,
            'TokenValidity'     => $minutes,
            'TokenCaseSensitive'=> $case_sensitive
        ));
    }
    
    /**
     * Request: Send a token as generated by ASPSMS.COM, optionally give token mask.
     * 
     * Official doc:
     * 
     * If MessageData is set, the placeholder <VERIFICATIONCODE> will be
     * substituted with the verification code. If MessageData is not defined,
     * or if MessageData does not contain the placeholder <VERIFICATIONCODE>,
     * only the verification code is sent.
     * 
     * Official doc:
     * 
     * Used to have the ASPSMS generate a verification code by mask. The mask can contain the following special characters:
     *
     *  # : a digit
     *  A : an alphabetic character
     *  N : an alphanumeric character
     *
     *  All other characters are taken literally. If not specified, the Mask is "NNNN" by default.
     *
     * 
     * @param string $phoneNr           Recipient phone number
     * @param string $reference         Your reference number
     * @param string $message           Message to send code with.
     * @param string $mask              Token code mask to use (# -> number, A -> Alphabetical)
     * @param int $minutes              Validity of token in minutes (default 5)
     * @param boolean $case_sensitive   Is given code case sensitive?
     * @return boolean                  Request success?
     */
    public function sendGeneratedToken($phoneNr,$reference,$message='',$mask='######',$minutes=5, $case_sensitive=0)
    {
        return $this->send(array(
            'RequestName'       => 'sendToken',
            'Recipients'        => $phoneNr,
            'TokenReference'    => $reference,
            'TokenMask'         => $mask,
            'MessageData'       => $message,
            'TokenValidity'     => $minutes,
            'TokenCaseSensitive'=> $case_sensitive
        ));
    }
    
    /**
     * Request: attempt to validate token.
     * 
     * NOTE: If a token have been successfully validated, any future attempts (no matter the 
     * verification code use) succeed.
     * 
     * @param string $phoneNr           Recipient phone number
     * @param string $reference         Your reference number
     * @param string $verificationCode  Required verification code to validate
     * @return boolean                  Is given verification code for use valid?
     */
    public function validateToken($phoneNr,$reference,$verificationCode)
    {
        return $this->send(array(
            'RequestName'       => 'verifyToken',
            'PhoneNumber'       => $phoneNr,
            'TokenReference'    => $reference,
            'VerificationCode'  => $verificationCode
        ));
    }
}